{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/Components/logo/logo.component.ts","./src/app/Components/logo/logo.component.html","./src/app/Components/sidenav/sidenav.component.ts","./src/app/Components/sidenav/sidenav.component.html","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/pages/create/create.component.ts","./src/app/pages/create/create.component.html","./src/app/pages/landing/landing.component.ts","./src/app/pages/landing/landing.component.html","./src/app/pages/poll-not-found/poll-not-found.component.ts","./src/app/pages/poll-not-found/poll-not-found.component.html","./src/app/pages/poll/poll.component.ts","./src/app/pages/poll/poll.component.html","./src/app/pages/polldata/polldata.component.ts","./src/app/pages/polldata/polldata.component.html","./src/app/pages/success/success.component.ts","./src/app/pages/success/success.component.html","./src/app/services/connect.service.ts","./src/app/services/ualert.service.ts","./src/app/store/app.action.ts","./src/app/store/app.state.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-logo',\n  templateUrl: './logo.component.html',\n  styleUrls: ['./logo.component.scss']\n})\nexport class LogoComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  home() {\n    this.router.navigate([\"\"]);\n  }\n}\n","<div class=\"logo\" (click)=\"home()\">\n  P<mat-icon> insert_invitation</mat-icon>ller\n</div>\n","import { SetCreateRoomIds } from './../../store/app.action';\nimport { RoomIds } from './../../store/app.state';\nimport { UAlertService } from './../../services/ualert.service';\nimport { ConnectService } from './../../services/connect.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngxs/store';\n\nexport interface CreatedPollsStorage {\n  data: CreatedPolls[];\n}\n\nexport interface CreatedPolls {\n  creationDate: Date;\n  cId: string;\n  rId: string;\n  titel: string;\n}\n\n@Component({\n  selector: 'app-sidenav',\n  templateUrl: './sidenav.component.html',\n  styleUrls: ['./sidenav.component.scss']\n})\nexport class SidenavComponent implements OnInit {\n\n  opend: boolean = false;\n\n  PollsList: CreatedPollsStorage = {\n    data: [],\n  };\n\n  constructor(private store: Store,\n    private connectService: ConnectService,\n    private router: Router,\n    private uAlert: UAlertService) { }\n\n  ngOnInit(): void {\n    this.PollsList = JSON.parse(localStorage.getItem(\"createdPolls\"));\n    if (this.PollsList == null) {\n      this.PollsList = {\n        data: [],\n      }\n    }\n  }\n\n  routeTo(rId: string, cId: string) {\n    this.router.navigate(['/polldata'], {\n      queryParams: { rId: rId, cId: cId },\n    });\n  }\n\n  createClicked() {\n    this.connectService.newRoom().subscribe(\n      (res: RoomIds) => {\n        this.store.dispatch(new SetCreateRoomIds(res));\n        this.router.navigate(['create']);\n      },\n      (err) => {\n        this.uAlert.setAlert('Couldn`t reach server', 'Error');\n      }\n    );\n  }\n\n}\n","<div [ngClass]=\"{disNone: !opend}\" class=\"nav-container\">\n  <mat-sidenav-container class=\"example-container\">\n    <mat-sidenav #drawer class=\"example-sidenav\" mode=\"side\" position=\"end\">\n      <div class=\"close\" (click)=\"drawer.toggle(); opend=!opend\">\n      <mat-icon>close</mat-icon>\n      </div>\n      <p>Your Polls:</p>\n      <mat-card *ngFor=\"let item of PollsList.data\" (click)=\"routeTo(item.rId, item.cId)\" >{{item.titel}}</mat-card>\n\n    <button mat-raised-button color=\"primary\" (click)=\"createClicked()\">\n      + Create\n    </button>\n    </mat-sidenav>\n  </mat-sidenav-container>\n</div>\n\n<div class=\"nav-button\" (click)=\"drawer.toggle(); opend=!opend\">\n  <mat-icon class=\"menu\">menu</mat-icon>\n</div>\n","import { SuccessComponent } from './pages/success/success.component';\r\nimport { LandingComponent } from './pages/landing/landing.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CreateComponent } from './pages/create/create.component';\r\nimport { PolldataComponent } from './pages/polldata/polldata.component';\r\nimport { PollComponent } from './pages/poll/poll.component';\r\nimport { PollNotFoundComponent } from './pages/poll-not-found/poll-not-found.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'poll',\r\n    component: PollComponent,\r\n  },\r\n  {\r\n    path: 'create',\r\n    component: CreateComponent,\r\n  },\r\n  {\r\n    path: 'polldata',\r\n    component: PolldataComponent,\r\n  },\r\n  {\r\n    path: 'notfound',\r\n    component: PollNotFoundComponent,\r\n  },\r\n  {\r\n    path: 'success',\r\n    component: SuccessComponent,\r\n  },\r\n  {\r\n    path: '',\r\n    component: LandingComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'consensus-frontend';\n}\n","<router-outlet></router-outlet>\n","import { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { AppState } from './store/app.state';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LandingComponent } from './pages/landing/landing.component';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';\r\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\r\nimport { CreateComponent } from './pages/create/create.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { PolldataComponent } from './pages/polldata/polldata.component';\r\nimport { PollComponent } from './pages/poll/poll.component';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { PollNotFoundComponent } from './pages/poll-not-found/poll-not-found.component';\r\nimport { SuccessComponent } from './pages/success/success.component';\r\nimport { SidenavComponent } from './Components/sidenav/sidenav.component';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { LogoComponent } from './Components/logo/logo.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LandingComponent,\r\n    CreateComponent,\r\n    PolldataComponent,\r\n    PollComponent,\r\n    PollNotFoundComponent,\r\n    SuccessComponent,\r\n    SidenavComponent,\r\n    LogoComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    NgxsModule.forRoot([AppState]),\r\n    NgxsLoggerPluginModule.forRoot(),\r\n    NgxsReduxDevtoolsPluginModule.forRoot(),\r\n    BrowserAnimationsModule,\r\n    MatInputModule,\r\n    MatButtonToggleModule,\r\n    MatButtonModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatSnackBarModule,\r\n    MatListModule,\r\n    MatDividerModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatSidenavModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule { }\r\n","import { CreatedPolls } from './../../Components/sidenav/sidenav.component';\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n} from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport Datepickk from 'datepickk';\r\nimport { AppState, RoomIds } from '../../store/app.state';\r\nimport { ConnectService } from '../../services/connect.service';\r\nimport { Router } from '@angular/router';\r\nimport { UAlertService } from '../../services/ualert.service';\r\nimport { SetCreateRoomIds } from '../../store/app.action';\r\nimport { CreatedPollsStorage } from 'src/app/Components/sidenav/sidenav.component';\r\n\r\nexport type SelectedMode = 'None' | 'Date' | 'Text';\r\n\r\nexport interface roomlistentry {\r\n  entrydata: string;\r\n  date?: Date;\r\n  votes?: string[];\r\n  id?: number;\r\n}\r\n\r\nexport interface RoomObject {\r\n  titel: string;\r\n  url: string;\r\n  editUrl: string;\r\n  roomId: string;\r\n  creatorId: string;\r\n  creationDate: Date;\r\n  description: string;\r\n  parNames: string[];\r\n  data: roomlistentry[];\r\n  votesVisible: boolean;\r\n  email?: string;\r\n}\r\n\r\n@Component({\r\n  templateUrl: './create.component.html',\r\n  styleUrls: ['./create.component.scss', './datepickk.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CreateComponent implements OnInit {\r\n  @ViewChild('datePickerContainer') datePickerElement: ElementRef;\r\n  now = new Date();\r\n  datepicker;\r\n  titel: string;\r\n  description: string;\r\n  email: string = \"\";\r\n\r\n  votesVisible: boolean = false;\r\n\r\n  optionsList: roomlistentry[] = [{ entrydata: '' }];\r\n\r\n  titelFormControl = new FormControl('', [Validators.required]);\r\n  emailFormControl = new FormControl('', [\r\n    Validators.email,\r\n  ]);\r\n\r\n  selectedMode: SelectedMode = 'Date';\r\n\r\n  @Select(AppState.createRoomIds)\r\n  createRoomIds$;\r\n\r\n  createRoomIds: RoomIds;\r\n\r\n  constructor(\r\n    private connectService: ConnectService,\r\n    private router: Router,\r\n    private uAlert: UAlertService,\r\n    private store: Store\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createRoomIds$.subscribe((createRoomIds: RoomIds) => {\r\n      this.createRoomIds = createRoomIds;\r\n    });\r\n    if (this.createRoomIds.creatorId == '' || this.createRoomIds.roomId == '') {\r\n      this.router.navigate(['']);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.datepicker = new Datepickk({\r\n      container: this.datePickerElement.nativeElement,\r\n      inline: true,\r\n      tooltips: {\r\n        date: new Date(),\r\n        text: 'Tooltip',\r\n      },\r\n    });\r\n  }\r\n\r\n  addOption() {\r\n    this.optionsList.push({ entrydata: '' });\r\n  }\r\n\r\n  removeOption(i: number) {\r\n    console.log(this.optionsList);\r\n    this.optionsList.splice(i, 1);\r\n    console.log(i);\r\n  }\r\n\r\n  createPoll() {\r\n    let validEmail: string;\r\n    if (this.emailFormControl.hasError('email')) {\r\n      validEmail = \"\";\r\n    } else {\r\n      validEmail = this.email;\r\n    }\r\n    if (this.titel !== undefined && this.selectedMode != 'None') {\r\n      let newRoom: RoomObject = {\r\n        titel: this.titel,\r\n        url: window.location.origin + '/#/poll?rId=' + this.createRoomIds.roomId,\r\n        editUrl: window.location.origin + '/#/polldata?rId=' + this.createRoomIds.roomId + '&cId=' + this.createRoomIds.creatorId,\r\n        description: this.description || '',\r\n        creationDate: new Date(),\r\n        roomId: this.createRoomIds.roomId,\r\n        creatorId: this.createRoomIds.creatorId,\r\n        parNames: [],\r\n        data: [],\r\n        votesVisible: this.votesVisible,\r\n        email: validEmail,\r\n      };\r\n\r\n      console.log(newRoom.url);\r\n\r\n      if (this.selectedMode == 'Text') {\r\n        let i = 0;\r\n        for (let entry of this.optionsList) {\r\n          newRoom.data.push({\r\n            votes: [],\r\n            entrydata: entry.entrydata,\r\n            id: i,\r\n          });\r\n          i++;\r\n        }\r\n      } else {\r\n        newRoom.data = this.formatDates(this.datepicker.selectedDates);\r\n      }\r\n\r\n      this.connectService.createRoom(newRoom).subscribe(\r\n        (res) => {\r\n          this.store.dispatch(\r\n            new SetCreateRoomIds({ roomId: '', creatorId: '' })\r\n          );\r\n\r\n          let cPolls: CreatedPollsStorage;\r\n          cPolls = JSON.parse(localStorage.getItem(\"createdPolls\"));\r\n          console.log(cPolls);\r\n          if (cPolls == null) {\r\n            cPolls = {\r\n              data: [],\r\n            }\r\n          }\r\n          let cPollEntry: CreatedPolls = {\r\n            cId: res.creatorId,\r\n            rId: res.roomId,\r\n            creationDate: new Date(),\r\n            titel: this.titel,\r\n          }\r\n          cPolls.data.unshift(cPollEntry);\r\n          localStorage.setItem(\"createdPolls\", JSON.stringify(cPolls));\r\n          this.router.navigate(['/polldata'], {\r\n            queryParams: { rId: res.roomId, cId: res.creatorId },\r\n          });\r\n        },\r\n        (err) => {\r\n          this.uAlert.setAlert(\r\n            'Something went wrong! Please try again!',\r\n            'Error'\r\n          );\r\n        }\r\n      );\r\n    } else {\r\n      this.uAlert.setAlert(\"Please enter a Titel\", \"Warning\")\r\n    }\r\n  }\r\n\r\n  formatDates(dates: Date[]): roomlistentry[] {\r\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    const months = [\r\n      'Jan',\r\n      'Feb',\r\n      'Mar',\r\n      'Apr',\r\n      'May',\r\n      'Jun',\r\n      'Jul',\r\n      'Aug',\r\n      'Sep',\r\n      'Oct',\r\n      'Nov',\r\n      'Dec',\r\n    ];\r\n\r\n    let formattedDates: roomlistentry[] = [];\r\n    let i = 0;\r\n    for (let date of dates) {\r\n      let stringDate =\r\n        days[date.getDay()] +\r\n        ',´' +\r\n        date.getDate() +\r\n        ' ' +\r\n        months[date.getMonth()];\r\n      formattedDates.push({\r\n        entrydata: stringDate,\r\n        date: date,\r\n        votes: [],\r\n        id: i,\r\n      });\r\n      i++;\r\n    }\r\n    return formattedDates;\r\n  }\r\n}\r\n\r\n//data structure of a new room\r\n/*{\r\n  titel: string\r\n  roomId: string;\r\n  creatorId: string;\r\n  creationDate: Date;\r\n  data: roomlistentry[];\r\n}\r\n\r\nroomlistentry{\r\n  entrydata: string\r\n\r\n}\r\n*/\r\n","<div class=\"create-container\">\r\n<app-sidenav></app-sidenav>\r\n<app-logo></app-logo>\r\n  <h1>Create Poll</h1>\r\n\r\n  <div class=\"settings-container\">\r\n    <div class=\"titel-container textfield\">\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Titel</mat-label>\r\n        <input\r\n          matInput\r\n          [formControl]=\"titelFormControl\"\r\n          placeholder=\"Titel of the Poll\"\r\n          [(ngModel)]=\"titel\"\r\n        />\r\n        <mat-error *ngIf=\"titelFormControl.hasError('required')\">\r\n          Titel is required\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"description-container textfield\">\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Description: (optional)</mat-label>\r\n        <textarea matInput [(ngModel)]=\"description\"></textarea>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"email-container textfield\">\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Email: (opional)</mat-label>\r\n        <input matInput [formControl]=\"emailFormControl\" placeholder=\"Your Email\" [(ngModel)]=\"email\" />\r\n        <mat-error *ngIf=\"emailFormControl.hasError('email')\">\r\n          Email is invalid\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"select-mode-container\">\r\n      <!--<div class=\"select-mode\">-->\r\n      <mat-button-toggle-group name=\"fontStyle\" aria-label=\"Font Style\">\r\n        <mat-button-toggle (click)=\"selectedMode = 'Date'\"\r\n          >Date</mat-button-toggle\r\n        >\r\n        <mat-button-toggle (click)=\"selectedMode = 'Text'\"\r\n          >Text</mat-button-toggle\r\n        >\r\n      </mat-button-toggle-group>\r\n      <!--<button (click)=\"selectedMode = 'Date'\" class=\"Date\">Date</button>\r\n        <button (click)=\"selectedMode = 'Text'\" class=\"text\">Text</button>-->\r\n    </div>\r\n    <div *ngIf=\"selectedMode != 'None'\" class=\"select-list-container\">\r\n      <div\r\n        #datePickerContainer\r\n        class=\"datepicker-container\"\r\n        [ngClass]=\"{\r\n          show: selectedMode == 'Date',\r\n          hide: selectedMode != 'Date'\r\n        }\"\r\n      ></div>\r\n      <div class=\"text-mode-container\" *ngIf=\"selectedMode == 'Text'\">\r\n        <div *ngFor=\"let optionItem of optionsList; let index = index\">\r\n          <mat-form-field class=\"full-width\">\r\n            <mat-label>Option</mat-label>\r\n            <input\r\n              matInput\r\n              placeholder=\"An Option...\"\r\n              [(ngModel)]=\"optionsList[index].entrydata\"\r\n            />\r\n            <button\r\n              mat-button\r\n              matSuffix\r\n              mat-icon-button\r\n              aria-label=\"Clear\"\r\n              (click)=\"removeOption(index)\"\r\n            >\r\n              <mat-icon>close</mat-icon>\r\n            </button>\r\n          </mat-form-field>\r\n        </div>\r\n        <button mat-raised-button color=\"accent\" (click)=\"addOption()\">\r\n          + Add Option\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"toggle-view\">\r\n    <mat-slide-toggle color=\"primary\" [(ngModel)]=\"votesVisible\">Let participants view results</mat-slide-toggle>\r\n    </div>\r\n    <div class=\"create-button-container\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"createPoll()\">\r\n        Create Poll\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { SetCreateRoomIds } from './../../store/app.action';\r\nimport { ConnectService } from './../../services/connect.service';\r\n\r\nimport { Component, OnInit, Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngxs/store';\r\nimport { RoomIds } from '../../store/app.state';\r\nimport { UAlertService } from '../../services/ualert.service';\r\n\r\n@Component({\r\n  templateUrl: './landing.component.html',\r\n  styleUrls: ['./landing.component.scss'],\r\n})\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LandingComponent implements OnInit {\r\n  constructor(\r\n    private store: Store,\r\n    private connectService: ConnectService,\r\n    private router: Router,\r\n    private uAlert: UAlertService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  createClicked() {\r\n    this.connectService.newRoom().subscribe(\r\n      (res: RoomIds) => {\r\n        this.store.dispatch(new SetCreateRoomIds(res));\r\n        this.router.navigate(['create']);\r\n      },\r\n      (err) => {\r\n        this.uAlert.setAlert('Couldn`t reach server', 'Error');\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"landing-container\">\n  <app-sidenav></app-sidenav>\n  <app-logo></app-logo>\n\n  <div class=\"titel\">\n    P<mat-icon> insert_invitation</mat-icon>ller\n  </div>\n\n<div class=\"create-button\">\n<button mat-raised-button color=\"primary\" (click)=\"createClicked()\">\n        Create\n</button>\n</div>\n</div>\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  templateUrl: './poll-not-found.component.html',\r\n  styleUrls: ['./poll-not-found.component.scss']\r\n})\r\nexport class PollNotFoundComponent implements OnInit {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  Back() {\r\n    this.router.navigate([\"\"]);\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <app-sidenav></app-sidenav>\r\n  <app-logo></app-logo>\r\n  <div class=\"message\">\r\n    Sorry! It seams that this Poll doesn't exist on the Server :(\r\n  </div>\r\n  <div class=\"create-button\">\r\n    <button mat-raised-button color=\"primary\" (click)=\"Back()\">\r\n      Back to Start\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { isGeneratedFile } from '@angular/compiler/src/aot/util';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ConnectService } from '../../services/connect.service';\r\nimport { UAlertService } from '../../services/ualert.service';\r\nimport { roomlistentry } from '../create/create.component';\r\n\r\nexport interface PollResponse {\r\n  titel: string;\r\n  description: string;\r\n  roomId: string;\r\n  parNames: string[];\r\n  data: roomlistentry[];\r\n  votesVisible: boolean;\r\n}\r\n\r\nexport interface NewVote {\r\n  roomId: string;\r\n  name: string;\r\n  voteIds: number[];\r\n}\r\n\r\nexport interface UpdateVote {\r\n  roomId: string;\r\n  oldName: string;\r\n  name: string;\r\n  voteIds: number[];\r\n}\r\n\r\nexport interface VotedPollsStorage {\r\n  data: VotedPoll[];\r\n}\r\n\r\nexport interface VotedPoll {\r\n  roomId: string;\r\n  name: string;\r\n}\r\n\r\n@Component({\r\n  templateUrl: './poll.component.html',\r\n  styleUrls: ['./poll.component.scss'],\r\n})\r\nexport class PollComponent implements OnInit {\r\n  pollId: string;\r\n  pollData: PollResponse = {\r\n    data: [],\r\n    description: '',\r\n    parNames: [],\r\n    roomId: '',\r\n    titel: '',\r\n    votesVisible: false,\r\n  };\r\n  titel: string = '';\r\n  description: string = '';\r\n  name: string = '';\r\n  pollSelect = [];\r\n\r\n  alreadyVoted: boolean = false;\r\n\r\n  nameFormControl = new FormControl('', [Validators.required]);\r\n\r\n  constructor(\r\n    private Activatedroute: ActivatedRoute,\r\n    private router: Router,\r\n    private connectService: ConnectService,\r\n    private uAlert: UAlertService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.pollId = this.Activatedroute.snapshot.queryParamMap.get('rId') || '0';\r\n    if (this.pollId == '0') {\r\n      this.router.navigate(['']);\r\n    } else {\r\n      this.connectService.getPoll(this.pollId).subscribe(\r\n        (res) => {\r\n          this.pollData = res;\r\n          this.titel = this.pollData.titel;\r\n          this.description = this.pollData.description;\r\n\r\n          let votedStorage: VotedPollsStorage = JSON.parse(localStorage.getItem(\"votedPolls\"));\r\n          if (votedStorage == null) {\r\n            votedStorage = {\r\n              data: [],\r\n            }\r\n          }\r\n\r\n          for (let entry of votedStorage.data) {\r\n            if (entry.roomId == this.pollData.roomId) {\r\n              this.alreadyVoted = true;\r\n            }\r\n          }\r\n        },\r\n        (err) => {\r\n          if (err.error.message == 'PollIdNotFound') {\r\n            this.router.navigate(['notfound']);\r\n          } else {\r\n            this.uAlert.setAlert(\r\n              'Sorry there is currently a Server Error!',\r\n              'Error'\r\n            );\r\n          }\r\n        }\r\n      );\r\n\r\n      this.name = localStorage.getItem('name');\r\n      if (this.name == undefined) {\r\n        this.name = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  sendPoll() {\r\n    console.log(this.pollData.parNames);\r\n    if (this.name.length > 0) {\r\n      let votedStorage: VotedPollsStorage = JSON.parse(localStorage.getItem(\"votedPolls\"));\r\n      if (votedStorage == null) {\r\n        votedStorage = {\r\n          data: [],\r\n        }\r\n      }\r\n\r\n      let newVote: boolean = true;\r\n      let oldName: string = \"\";\r\n\r\n      for (let entry of votedStorage.data) {\r\n        if (entry.roomId == this.pollData.roomId) {\r\n          newVote = false;\r\n          oldName = entry.name;\r\n        }\r\n      }\r\n\r\n      let pNames: string[] = [];\r\n      if (!newVote) {\r\n        pNames = this.pollData.parNames.filter(e => e !== oldName); // will return ['A', 'C']\r\n      } else {\r\n        pNames = this.pollData.parNames;\r\n      }\r\n\r\n      if (!pNames.map((name) => name.toLowerCase()).includes(this.name.toLowerCase())) {\r\n        let votes: number[] = [];\r\n        for (let entry of this.pollSelect) {\r\n          votes.push(entry.id);\r\n        }\r\n\r\n        let vote: NewVote = {\r\n          name: this.name,\r\n          roomId: this.pollData.roomId,\r\n          voteIds: votes,\r\n        };\r\n\r\n        localStorage.setItem('name', this.name);\r\n\r\n        if (newVote) {\r\n          this.connectService.setVote(vote).subscribe(\r\n            (res) => {\r\n              if (res.serverMessage == '200') {\r\n                let newVotedEntry: VotedPoll = {\r\n                  name: this.name,\r\n                  roomId: this.pollData.roomId,\r\n                }\r\n\r\n                votedStorage.data.push(newVotedEntry);\r\n                localStorage.setItem(\"votedPolls\", JSON.stringify(votedStorage));\r\n\r\n                localStorage.setItem(\"lastVotedPoll\", window.location.toString());\r\n                this.router.navigate(['success']);\r\n              } else {\r\n                this.uAlert.setAlert(\r\n                  'Something went wrong! Please try again!',\r\n                  'Error'\r\n                );\r\n              }\r\n            },\r\n            (err) => {\r\n              this.uAlert.setAlert(\r\n                'Something went wrong! Please try again!',\r\n                'Error'\r\n              );\r\n            }\r\n          );\r\n        } else {\r\n          let updateVote: UpdateVote = {\r\n            name: vote.name,\r\n            oldName: oldName,\r\n            roomId: vote.roomId,\r\n            voteIds: vote.voteIds,\r\n          }\r\n\r\n          this.connectService.updateVote(updateVote).subscribe(\r\n            (res) => {\r\n              if (res.serverMessage == '200') {\r\n                let newVotedEntry: VotedPoll = {\r\n                  name: this.name,\r\n                  roomId: this.pollData.roomId,\r\n                }\r\n\r\n                votedStorage.data.push(newVotedEntry);\r\n                localStorage.setItem(\"votedPolls\", JSON.stringify(votedStorage));\r\n\r\n                localStorage.setItem(\"lastVotedPoll\", window.location.toString());\r\n                this.router.navigate(['success']);\r\n              } else {\r\n                this.uAlert.setAlert(\r\n                  'Something went wrong! Please try again!',\r\n                  'Error'\r\n                );\r\n              }\r\n            },\r\n            (err) => {\r\n              this.uAlert.setAlert(\r\n                'Something went wrong! Please try again!',\r\n                'Error'\r\n              );\r\n            }\r\n          );\r\n        }\r\n      } else {\r\n        this.uAlert.setAlert('This Name already exists!', 'Warning');\r\n      }\r\n    } else {\r\n      this.uAlert.setAlert('Please enter a Name', 'Error');\r\n    }\r\n  }\r\n\r\n  calcVotes(e: roomlistentry): number {\r\n    let votes: number = 0;\r\n    votes = e.votes.length;\r\n    if (this.pollSelect.includes(e)) {\r\n      votes++;\r\n    }\r\n\r\n    return votes;\r\n  }\r\n}\r\n","<div class=\"create-container\">\r\n  <app-sidenav></app-sidenav>\r\n  <app-logo></app-logo>\r\n  <h1>{{ titel }}</h1>\r\n  <div class=\"data-container\">\r\n    <div class=\"description\">\r\n      <mat-card class=\"description-container\" *ngIf=\"description.length > 0\">\r\n        <mat-card-content>\r\n          <mat-card-subtitle>Description:</mat-card-subtitle>\r\n        </mat-card-content>\r\n        <mat-card-content>\r\n          {{ description }}\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n\r\n    <mat-form-field class=\"name-input\">\r\n      <mat-label>Name</mat-label>\r\n      <input\r\n        matInput\r\n        [formControl]=\"nameFormControl\"\r\n        placeholder=\"Youre Name\"\r\n        [(ngModel)]=\"name\"\r\n      />\r\n      <mat-error *ngIf=\"nameFormControl.hasError('required')\">\r\n        Name is required\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <mat-selection-list [(ngModel)]=\"pollSelect\">\r\n      <mat-label>Select:</mat-label>\r\n      <mat-list-option *ngFor=\"let entry of pollData.data\" [value]=\"entry\">\r\n        <div class=\"list-option-container\">\r\n        <div *ngIf=\"pollData.votesVisible\" class=\"voted\">\r\n           {{calcVotes(entry)}}\r\n          <div class=\"votes-label\">\r\n            Votes\r\n          </div>\r\n        </div>\r\n        <div>\r\n        {{ entry.entrydata }}\r\n        </div>\r\n        </div>\r\n        <mat-divider></mat-divider>\r\n      </mat-list-option>\r\n    </mat-selection-list>\r\n\r\n    <div class=\"divider\">\r\n      <mat-divider></mat-divider>\r\n    </div>\r\n\r\n    <div class=\"send-button-container\">\r\n      <button *ngIf=\"!alreadyVoted\" mat-raised-button color=\"primary\" (click)=\"sendPoll()\">\r\n        Send <mat-icon>send</mat-icon>\r\n      </button>\r\n      <button *ngIf=\"alreadyVoted\" mat-raised-button color=\"primary\" (click)=\"sendPoll()\">\r\n              Update Vote <mat-icon>send</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { RoomIds } from '../../store/app.state';\r\nimport { ConnectService } from '../../services/connect.service';\r\nimport { RoomObject } from '../create/create.component';\r\nimport { UAlertService } from '../../services/ualert.service';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n} from '@angular/animations';\r\n\r\nexport interface ResultsDataTable {\r\n  id: number;\r\n  option: string;\r\n  votes: number;\r\n  persons: string[];\r\n}\r\n\r\n@Component({\r\n  templateUrl: './polldata.component.html',\r\n  styleUrls: ['./polldata.component.scss'],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\r\n      state('expanded', style({ height: '*' })),\r\n      transition(\r\n        'expanded <=> collapsed',\r\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')\r\n      ),\r\n    ]),\r\n  ],\r\n})\r\nexport class PolldataComponent implements OnInit, AfterViewInit {\r\n  constructor(\r\n    private Activatedroute: ActivatedRoute,\r\n    private router: Router,\r\n    private connectService: ConnectService,\r\n    private uAlert: UAlertService\r\n  ) {}\r\n  pollIds: RoomIds = {\r\n    roomId: '',\r\n    creatorId: '',\r\n  };\r\n\r\n  tableData: ResultsDataTable[] = [\r\n    {\r\n      id: 0,\r\n      option: 'a',\r\n      votes: 1,\r\n      persons: [],\r\n    },\r\n  ];\r\n  displayedColumns: string[] = ['id', 'option', 'votes'];\r\n  dataSource = new MatTableDataSource(this.tableData);\r\n\r\n  titel: string = '';\r\n  description: string = '';\r\n  pollData: RoomObject;\r\n\r\n  expandedElement: ResultsDataTable | null;\r\n\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n\r\n  ngOnInit(): void {\r\n    this.pollIds.roomId =\r\n      this.Activatedroute.snapshot.queryParamMap.get('rId') || '0';\r\n    this.pollIds.creatorId =\r\n      this.Activatedroute.snapshot.queryParamMap.get('cId') || '0';\r\n\r\n    if (this.pollIds.roomId == '0' || this.pollIds.creatorId == '0') {\r\n      this.router.navigate(['']);\r\n    } else {\r\n      this.connectService.getPollData(this.pollIds).subscribe(\r\n        (res) => {\r\n          this.pollData = res;\r\n          this.titel = this.pollData.titel;\r\n          this.description = this.pollData.description;\r\n\r\n          this.tableData = [];\r\n          for (let entry of this.pollData.data) {\r\n            let tdata: ResultsDataTable = {\r\n              option: entry.entrydata,\r\n              votes: entry.votes.length,\r\n              persons: entry.votes,\r\n              id: entry.id,\r\n            };\r\n\r\n            this.tableData.push(tdata);\r\n          }\r\n          console.log(this.tableData);\r\n          this.dataSource = new MatTableDataSource(this.tableData);\r\n          this.dataSource.sort = this.sort;\r\n        },\r\n        (err) => {\r\n          if (err.error.message == 'PollIdNotFound') {\r\n            this.router.navigate(['notfound']);\r\n          } else {\r\n            this.uAlert.setAlert(\r\n              'Sorry there is currently a Server Error!',\r\n              'Error'\r\n            );\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  copyStringToClipboard(str: string) {\r\n    //copys string to clipboard by creating a textarea and copying it with document.executeCommand\r\n    const selBox = document.createElement('textarea');\r\n    selBox.style.position = 'fixed';\r\n    selBox.style.left = '0';\r\n    selBox.style.top = '0';\r\n    selBox.style.opacity = '0';\r\n    selBox.value = str;\r\n    document.body.appendChild(selBox);\r\n    selBox.focus();\r\n    selBox.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(selBox);\r\n    this.uAlert.setAlert('Successfully copied to clipboard', 'Success');\r\n  }\r\n}\r\n","<div class=\"create-container\">\r\n  <app-sidenav></app-sidenav>\r\n  <app-logo></app-logo>\r\n  <h1>{{ titel }}</h1>\r\n  <div class=\"data-container\">\r\n    <mat-card class=\"description-container\" *ngIf=\"description.length > 0\">\r\n      <mat-card-content>\r\n        <mat-card-subtitle>Description:</mat-card-subtitle>\r\n      </mat-card-content>\r\n      <mat-card-content>\r\n        {{ description }}\r\n      </mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-form-field class=\"copy-url-field\">\r\n      <mat-label>Copy Link to Share this Poll</mat-label>\r\n      <input readonly matInput type=\"text\" [(ngModel)]=\"pollData.url\" />\r\n      <button\r\n        mat-button\r\n        matSuffix\r\n        mat-icon-button\r\n        (click)=\"copyStringToClipboard(pollData.url)\"\r\n      >\r\n        <mat-icon>file_copy</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n\r\n    <div class=\"participants-container\">\r\n      Participants:\r\n      <div class=\"par-name-list\">\r\n      <div class=\"persons-list-element\" *ngFor=\"let item of pollData.parNames\">\r\n        {{ item }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"results-label\">\r\n    Results:\r\n    </div>\r\n    <div class=\"data-table-container\">\r\n      <table\r\n        mat-table\r\n        [dataSource]=\"dataSource\"\r\n        matSort\r\n        class=\"mat-elevation-z8\"\r\n        matSortDisableClear\r\n        multiTemplateDataRows\r\n      >\r\n        <ng-container matColumnDef=\"id\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Nr.</th>\r\n          <td mat-cell *matCellDef=\"let element\">{{ element.id }}</td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"option\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>option</th>\r\n          <td mat-cell *matCellDef=\"let element\">{{ element.option }}</td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"votes\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>votes</th>\r\n          <td mat-cell *matCellDef=\"let element\">{{ element.votes }}</td>\r\n        </ng-container>\r\n\r\n        <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\r\n        <ng-container matColumnDef=\"expandedDetail\">\r\n          <td\r\n            mat-cell\r\n            *matCellDef=\"let element\"\r\n            [attr.colspan]=\"displayedColumns.length\"\r\n          >\r\n            <div\r\n              class=\"example-element-detail\"\r\n              [@detailExpand]=\"\r\n                element == expandedElement ? 'expanded' : 'collapsed'\r\n              \"\r\n            >\r\n              <h4>Persons:</h4>\r\n              <div class=\"persons-list\">\r\n                <div\r\n                  class=\"persons-list-element\"\r\n                  *ngFor=\"let item of element.persons\"\r\n                >\r\n                  {{ item }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr\r\n          mat-row\r\n          *matRowDef=\"let element; columns: displayedColumns\"\r\n          class=\"example-element-row\"\r\n          [class.example-expanded-row]=\"expandedElement === element\"\r\n          (click)=\"\r\n            expandedElement = expandedElement === element ? null : element\r\n          \"\r\n        ></tr>\r\n        <tr\r\n          mat-row\r\n          *matRowDef=\"let row; columns: ['expandedDetail']\"\r\n          class=\"example-detail-row\"\r\n        ></tr>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  templateUrl: './success.component.html',\n  styleUrls: ['./success.component.scss']\n})\nexport class SuccessComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  BackToPoll() {\n    window.location.href = localStorage.getItem(\"lastVotedPoll\");\n  }\n\n  BackToStart() {\n    this.router.navigate([\"\"]);\n  }\n}\n","<div class=\"container\">\n  <app-sidenav></app-sidenav>\n  <app-logo></app-logo>\n  <div class=\"message\">\n    You voted successfully\n  </div>\n\n  <div class=\"poll button\">\n    <button mat-raised-button color=\"accent\" (click)=\"BackToPoll()\">\n      Back to Poll\n    </button>\n  </div>\n\n  <div class=\"start button\">\n    <button mat-raised-button color=\"primary\" (click)=\"BackToStart()\">\n      Back to Start\n    </button>\n  </div>\n</div>\n","import { NewVote, UpdateVote } from './../pages/poll/poll.component';\r\nimport { environment } from './../../environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RoomObject } from '../pages/create/create.component';\r\nimport { PollResponse } from '../pages/poll/poll.component';\r\n\r\nexport interface NewRoomResponse {\r\n  roomId: string;\r\n  creatorId: string;\r\n}\r\n\r\nexport interface ServerStatusResponse {\r\n  serverMessage: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConnectService {\r\n  serverUrl: string = environment.serverAddress;\r\n  constructor(private http: HttpClient) { }\r\n\r\n  newRoom(): Observable<NewRoomResponse> {\r\n    return this.http.post<NewRoomResponse>(this.serverUrl + '/new', {});\r\n  }\r\n\r\n  createRoom(data): Observable<NewRoomResponse> {\r\n    return this.http.post<NewRoomResponse>(this.serverUrl + '/create', data);\r\n  }\r\n\r\n  getPollData(data: NewRoomResponse): Observable<RoomObject> {\r\n    return this.http.post<RoomObject>(this.serverUrl + '/getPollData', data);\r\n  }\r\n\r\n  getPoll(data: string): Observable<PollResponse> {\r\n    return this.http.post<PollResponse>(this.serverUrl + '/getPoll', {\r\n      roomId: data,\r\n    });\r\n  }\r\n\r\n  setVote(data: NewVote): Observable<ServerStatusResponse> {\r\n    return this.http.post<ServerStatusResponse>(\r\n      this.serverUrl + '/setVote',\r\n      data\r\n    );\r\n  }\r\n\r\n  updateVote(data: UpdateVote): Observable<ServerStatusResponse> {\r\n    return this.http.post<ServerStatusResponse>(\r\n      this.serverUrl + '/updateVote',\r\n      data\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  MatSnackBar,\r\n  MatSnackBarConfig,\r\n  MatSnackBarHorizontalPosition,\r\n  MatSnackBarVerticalPosition,\r\n  MatSnackBarRef,\r\n} from '@angular/material/snack-bar';\r\n\r\nexport type AlertType = 'Warning' | 'Error' | 'Success';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UAlertService {\r\n  snackBarConfig: MatSnackBarConfig;\r\n  snackBarRef: MatSnackBarRef<any>;\r\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\r\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom';\r\n  snackBarAutoHide = '2000';\r\n\r\n  constructor(private snackBar: MatSnackBar) {}\r\n\r\n  public setAlert(message: string, typ: AlertType) {\r\n    this.snackBarConfig = new MatSnackBarConfig();\r\n    this.snackBarConfig.horizontalPosition = this.horizontalPosition;\r\n    this.snackBarConfig.verticalPosition = this.verticalPosition;\r\n    this.snackBarConfig.duration = parseInt(this.snackBarAutoHide, 0);\r\n    if (typ == 'Error') {\r\n      this.snackBarConfig.panelClass = 'snackbar-error';\r\n    } else if (typ == 'Warning') {\r\n      this.snackBarConfig.panelClass = 'snackbar-warning';\r\n    } else if (typ == 'Success') {\r\n      this.snackBarConfig.panelClass = 'snackbar-success';\r\n    }\r\n    this.snackBarRef = this.snackBar.open(message, '', this.snackBarConfig);\r\n  }\r\n}\r\n","import { RoomIds } from './app.state';\r\nexport class SetCreateRoomIds {\r\n  static type = 'SetCreateRoomIds';\r\n  constructor(public createRoomIds: RoomIds) {}\r\n}\r\n","import { SetCreateRoomIds } from './app.action';\r\n//////Use\r\n/*\r\n  @Select(AppState.userId)\r\n  userId$;\r\n  ngOninit:\r\n    this.userId$.subscribe((userId: string) => {\r\n      this.userId = userId;\r\n    });\r\n  Set:\r\n  constructor: private store: Store\r\n  this.store.dispatch(new SetUserId(x));\r\n*/\r\n\r\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\r\n\r\nexport interface RoomIds {\r\n  roomId: string;\r\n  creatorId: string;\r\n}\r\n\r\nexport interface AppStateModel {\r\n  createRoomIds: RoomIds;\r\n}\r\n\r\n@State<AppStateModel>({\r\n  name: 'appState',\r\n  defaults: {\r\n    createRoomIds: { roomId: '', creatorId: '' },\r\n  },\r\n})\r\nexport class AppState {\r\n  @Selector()\r\n  static createRoomIds(state: AppStateModel) {\r\n    return state.createRoomIds;\r\n  }\r\n\r\n  @Action(SetCreateRoomIds)\r\n  SetCreateRoomIds(\r\n    context: StateContext<AppStateModel>,\r\n    action: SetCreateRoomIds\r\n  ) {\r\n    context.patchState({\r\n      createRoomIds: action.createRoomIds,\r\n    });\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  serverAddress: 'https://iqwertz-poller-app.herokuapp.com', //\"http://localhost:2871\",\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}